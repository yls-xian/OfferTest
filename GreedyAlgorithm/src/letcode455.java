/**
 * @author yulinsheng
 * @time 2021-05-11 12:34
 */

import java.util.Arrays;

/**
 * 假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。
 *
 * 对每个孩子 i，都有一个胃口值g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，
 * 都有一个尺寸 s[j]。如果 s[j]>= g[i]，我们可以将这个饼干 j 分配给孩子 i ，
 * 这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。
 *
 *
 * 示例1:
 *
 * 输入: g = [1,2,3], s = [1,1]
 * 输出: 1
 * 解释:
 * 你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。
 * 虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。
 * 所以你应该输出1。
 * 示例2:
 *
 * 输入: g = [1,2], s = [1,2,3]
 * 输出: 2
 * 解释:
 * 你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。
 * 你拥有的饼干数量和尺寸都足以让所有孩子满足。
 * 所以你应该输出2.

 */
public class letcode455 {
}

class Solution455 {
    public int findContentChildren(int[] g, int[] s) {
        /**
         * 贪心算法：首先考虑最优解问题，最优解是尽可能多的满足孩子
         * 子问题：每个孩子选择最适合自己的饼干=满足度的。
         * 分解问题：将每个孩子的满足度排序，优先满足最小的满足度孩子。
         *执行用时：9 ms, 在所有 Java 提交中击败了21.02%的用户
         * 内存消耗：38.9 MB, 在所有 Java 提交中击败了95.79%的用户
         */
        //首先将两个数组排序
        Arrays.sort(g);
        Arrays.sort(s);
        //初始化可以满足的孩子个数
        int res = 0;
        //定义双指针，分别指向孩子和饼干
        int child=0,cookie=0;
        //获得孩子的个数和饼干的个数
        int num_c = g.length;
        int num_b = s.length;
        //当指向孩子的指针小于孩子的个数，同时指向饼干的指针小于饼干的个数时进行循环操作
        while(child < num_c && cookie < num_b ){
            //一旦饼干的体积达到了孩子的满足度，继续循环下一个孩子
            if(s[cookie]>=g[child]){
                res++;
                child++;
            }
            //饼干体积按照大小继续循环
            cookie++;
        }
        return res;
    }
}